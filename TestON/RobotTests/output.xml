<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20150701 17:09:18.724" generator="Robot 2.8.7 (Python 2.7.10 on linux2)">
<suite source="/tmp/ONLabTest/TestON/RobotTests/ScalePOC.robot" id="s1" name="ScalePOC">
<kw type="setup" name="ONOS Suite Setup">
<doc>Transfers the ONOS dist over to the test vm and start the controller. We will leverage the bash script, "onos-install" to do this.</doc>
<arguments>
<arg>${CONTROLLER_IP}</arg>
<arg>${CONTROLLER_USER}</arg>
</arguments>
<kw type="kw" name="Create Controller IP List">
<doc>Creates a list of controller ips for a cluster. When creating a cluster, be sure to set each variable to %{OC} env vars in the variables section</doc>
<arguments>
</arguments>
<kw type="kw" name="@{controller_list} = BuiltIn.Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${CONTROLLER_IP}</arg>
</arguments>
<msg timestamp="20150701 17:09:18.928" level="INFO">@{controller_list} = [ 10.0.0.152 ]</msg>
<status status="PASS" endtime="20150701 17:09:18.928" starttime="20150701 17:09:18.928"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>@{controller_list}</arg>
</arguments>
<msg timestamp="20150701 17:09:18.929" level="INFO">@{controller_list} = [ 10.0.0.152 ]</msg>
<status status="PASS" endtime="20150701 17:09:18.929" starttime="20150701 17:09:18.928"></status>
</kw>
<status status="PASS" endtime="20150701 17:09:18.929" starttime="20150701 17:09:18.927"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>onos-package</arg>
</arguments>
<msg timestamp="20150701 17:09:18.937" level="INFO">Running command 'onos-package 2&gt;&amp;1'</msg>
<status status="FAIL" endtime="20150701 17:09:21.094" starttime="20150701 17:09:18.929"></status>
</kw>
<status status="FAIL" endtime="20150701 17:09:21.100" starttime="20150701 17:09:18.924"></status>
</kw>
<test id="s1-t1" name="Find Max Switches By Scaling">
<doc>Find the max number of switches from 10 until reaching 20 in steps of 10. The following checks are made through REST APIs:
- Verify device count is correct
- Verify device status is available
- Verify device roles are MASTER (default role in case of standalone controller)
- Verify topology recognizes corret number of devices (Through api "/topology")
- Observe each device individually
- Observe links, hosts, and flows through the controller
- Observe device info at lower level on mininet (Written for PoC). Shows flows, links, and ports. Checks can be easily implemented at that level as well
- STOP Mininet Topo
- Verify device count is zero
- Verify topology sees no devices (Through api "/topology")</doc>
<tags>
<tag>done</tag>
</tags>
<status status="FAIL" endtime="20150701 17:09:21.103" critical="yes" starttime="20150701 17:09:21.101">Test execution stopped due to a fatal error.</status>
</test>
<kw type="teardown" name="ONOS Suite Teardown">
<doc>Stop ONOS on Controller VMs and grabs karaf logs on each controller (put them in /tmp)</doc>
<arguments>
</arguments>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>onos-kill</arg>
</arguments>
<msg timestamp="20150701 17:09:21.114" level="INFO">Running command 'onos-kill 2&gt;&amp;1'</msg>
<msg timestamp="20150701 17:09:21.371" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20150701 17:09:21.370" starttime="20150701 17:09:21.105"></status>
</kw>
<errors>
<msg timestamp="20150701 17:09:21.372" level="ERROR">Execution stopped by user.</msg>
</errors>
</robot>
